// Motoko Un-Grammar.
//
// This grammar specifies the structure of Motoko's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node

// Names

Name =
  'ident'

// Types

Type =
    OptionalType
  | ParenType
  | AsyncType
  | PathType
  | TupleType
  | ArrayType
  | FuncType
  | ObjectType
  | VariantType
  | NamedType
  | PrimType

OptionalType =
  '?' Type

ParenType =
  '(' Type ')'

AsyncType =
  'async' Type

PathType =
  Path

Path
  = Name ('.' Path)*

TupleType =
  '(' fields:(Type (',' Type)*)? ')'

ArrayType =
  '[' Type ']'

FuncType =
  'shared'? 'query'? TypParams? Type '->' Type

TypParams =
  '<' params:(TypBind (',' TypBind)*) '>'

TypBind =
  Path bound:('<:' Type)?

ObjectType =
  ObjectSort? '{' fields:(TypeField (',' TypeField)*)? '}'

ObjectSort =
    'object'
  | 'class'
  | 'actor'

ObjectField =
    TypeField
  | TypeFieldFunc

TypeField = 'var'? Name ':' Type
// Does this have to be a functype?
TypeFieldFunc = Name TypParams? FuncType

VariantType =
  '{' variants:(TypeTag (',' TypeTag)*)? '}'

TypeTag =
  '#' Name (':' Type)?

NamedType =
  Name ':' Type

PrimType =
  'prim' Name
